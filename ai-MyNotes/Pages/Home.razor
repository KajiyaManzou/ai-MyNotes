@page "/test"
@using ai_MyNotes.Models
@using TG.Blazor.IndexedDB
@inject IndexedDBManager DbManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Bootstrap Components Test</PageTitle>

<div class="container-fluid py-4">
    <h1 class="mb-4">Bootstrap Components Test</h1>

    <!-- Alert Components -->
    <div class="row mb-4">
        <div class="col-12">
            <h3>Alerts</h3>
            <div class="alert alert-primary" role="alert">
                Primary alert - Bootstrap is working!
            </div>
            <div class="alert alert-success" role="alert">
                Success alert - Components are loaded correctly!
            </div>
        </div>
    </div>

    <!-- Button Components -->
    <div class="row mb-4">
        <div class="col-12">
            <h3>Buttons</h3>
            <button type="button" class="btn btn-primary me-2">Primary</button>
            <button type="button" class="btn btn-secondary me-2">Secondary</button>
            <button type="button" class="btn btn-success me-2">Success</button>
            <button type="button" class="btn btn-outline-primary me-2">Outline Primary</button>
        </div>
    </div>

    <!-- Card Components -->
    <div class="row mb-4">
        <div class="col-md-6">
            <h3>Card Component</h3>
            <div class="card memo-card">
                <div class="card-header">
                    Sample Memo Card
                </div>
                <div class="card-body">
                    <h5 class="card-title">Memo Title</h5>
                    <p class="card-text">This is a sample memo content to test Bootstrap card component functionality.</p>
                    <p class="card-text"><small class="text-muted">Created: @DateTime.Now.ToString("yyyy/MM/dd HH:mm")</small></p>
                </div>
            </div>
        </div>
    </div>

    <!-- Form Components -->
    <div class="row mb-4">
        <div class="col-md-6">
            <h3>Form Components</h3>
            <div class="mb-3">
                <label for="testInput" class="form-label">Test Input</label>
                <input type="text" class="form-control" id="testInput" placeholder="Enter text here">
            </div>
            <div class="mb-3">
                <label for="testTextarea" class="form-label">Test Textarea</label>
                <textarea class="form-control" id="testTextarea" rows="3" placeholder="Enter memo content here"></textarea>
            </div>
        </div>
    </div>

    <!-- Modal Test Button -->
    <div class="row mb-4">
        <div class="col-12">
            <h3>Modal Component</h3>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#testModal">
                Open Test Modal
            </button>
        </div>
    </div>

    <!-- IndexedDB Test -->
    <div class="row mb-4">
        <div class="col-12">
            <h3>IndexedDB Test</h3>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">メモの作成・表示テスト</h5>
                    
                    <div class="mb-3">
                        <label for="memoContent" class="form-label">メモ内容</label>
                        <textarea @bind="testMemoContent" class="form-control" id="memoContent" rows="3" 
                                placeholder="テスト用のメモ内容を入力してください"></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <button @onclick="CreateTestMemo" class="btn btn-primary me-2" disabled="@isLoading">
                            @if(isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                            }
                            メモを作成
                        </button>
                        <button @onclick="LoadAllMemos" class="btn btn-secondary me-2" disabled="@isLoading">メモ一覧を読み込み</button>
                        <button @onclick="ClearAllMemos" class="btn btn-danger" disabled="@isLoading">全メモ削除</button>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <div class="alert @(statusMessage.Contains("エラー") ? "alert-danger" : "alert-success")" role="alert">
                            @statusMessage
                        </div>
                    }
                    
                    @if (memos?.Any() == true)
                    {
                        <h6>保存されたメモ一覧:</h6>
                        <div class="row">
                            @foreach (var memo in memos)
                            {
                                <div class="col-md-6 col-lg-4 mb-2">
                                    <div class="card memo-card">
                                        <div class="card-body">
                                            <h6 class="card-title">@memo.Title</h6>
                                            <p class="card-text">@memo.GetPreview(80)</p>
                                            <p class="card-text">
                                                <small class="text-muted">
                                                    作成: @memo.CreatedAt.ToString("MM/dd HH:mm")<br/>
                                                    更新: @memo.UpdatedAt.ToString("MM/dd HH:mm")
                                                </small>
                                            </p>
                                            <button @onclick="() => DeleteMemo(memo.Id)" 
                                                    class="btn btn-sm btn-outline-danger"
                                                    disabled="@isLoading">削除</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else if (memos != null)
                    {
                        <p class="text-muted">保存されたメモはありません</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Responsive Grid Test -->
    <div class="row mb-4">
        <div class="col-12">
            <h3>Responsive Grid</h3>
        </div>
        <div class="col-12 col-md-6 col-lg-4 mb-2">
            <div class="bg-primary text-white p-3 rounded">Col 1</div>
        </div>
        <div class="col-12 col-md-6 col-lg-4 mb-2">
            <div class="bg-secondary text-white p-3 rounded">Col 2</div>
        </div>
        <div class="col-12 col-md-6 col-lg-4 mb-2">
            <div class="bg-success text-white p-3 rounded">Col 3</div>
        </div>
    </div>
</div>

@code {
    private string testMemoContent = "";
    private List<Memo> memos = new List<Memo>();
    private string statusMessage = "";
    private bool isLoading = false;
    private CancellationTokenSource? cancellationTokenSource;

    protected override async Task OnInitializedAsync()
    {
        cancellationTokenSource = new CancellationTokenSource();
        
        try
        {
            await LoadAllMemos();
        }
        catch (Exception ex)
        {
            statusMessage = $"初期化エラー: {ex.Message}";
        }
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }

    private async Task CreateTestMemo()
    {
        if (string.IsNullOrWhiteSpace(testMemoContent))
        {
            statusMessage = "エラー: メモ内容を入力してください";
            StateHasChanged();
            return;
        }

        isLoading = true;
        statusMessage = "";
        StateHasChanged();

        try
        {
            if (cancellationTokenSource?.Token.IsCancellationRequested == true) return;
            
            var memo = new Memo
            {
                Content = testMemoContent
            };
            
            memo.UpdateTitleFromContent();
            memo.Touch();

            var record = new StoreRecord<Memo>
            {
                Storename = MyNotesDatabase.MemoStore,
                Data = memo
            };
            await DbManager.AddRecord(record);
            
            statusMessage = $"メモ「{memo.Title}」を作成しました";
            testMemoContent = "";
            
            // メモ一覧を再読み込み
            await LoadAllMemos();
        }
        catch (Exception ex) when (!ex.GetType().Name.Contains("TaskCanceled"))
        {
            statusMessage = $"エラー: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            if (cancellationTokenSource?.Token.IsCancellationRequested == false)
            {
                StateHasChanged();
            }
        }
    }

    private async Task LoadAllMemos()
    {
        isLoading = true;
        statusMessage = "";
        StateHasChanged();

        try
        {
            if (cancellationTokenSource?.Token.IsCancellationRequested == true) return;
            
            // 更新日時降順でソートして取得
            var allMemos = await DbManager.GetRecords<Memo>(MyNotesDatabase.MemoStore);
            memos = allMemos?.OrderByDescending(m => m.UpdatedAt).ToList() ?? new List<Memo>();
            
            statusMessage = $"{memos.Count}件のメモを読み込みました";
        }
        catch (Exception ex) when (!ex.GetType().Name.Contains("TaskCanceled"))
        {
            statusMessage = $"エラー: {ex.Message}";
            memos = new List<Memo>();
        }
        finally
        {
            isLoading = false;
            if (cancellationTokenSource?.Token.IsCancellationRequested == false)
            {
                StateHasChanged();
            }
        }
    }

    private async Task DeleteMemo(int memoId)
    {
        isLoading = true;
        statusMessage = "";
        StateHasChanged();

        try
        {
            if (cancellationTokenSource?.Token.IsCancellationRequested == true) return;
            
            await DbManager.DeleteRecord(MyNotesDatabase.MemoStore, memoId);
            statusMessage = "メモを削除しました";
            
            // メモ一覧を再読み込み
            await LoadAllMemos();
        }
        catch (Exception ex) when (!ex.GetType().Name.Contains("TaskCanceled"))
        {
            statusMessage = $"エラー: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            if (cancellationTokenSource?.Token.IsCancellationRequested == false)
            {
                StateHasChanged();
            }
        }
    }

    private async Task ClearAllMemos()
    {
        isLoading = true;
        statusMessage = "";
        StateHasChanged();

        try
        {
            if (cancellationTokenSource?.Token.IsCancellationRequested == true) return;
            
            // 個別に削除（ClearAsyncがない場合の代替）
            var allMemos = await DbManager.GetRecords<Memo>(MyNotesDatabase.MemoStore);
            foreach (var memo in allMemos)
            {
                if (cancellationTokenSource?.Token.IsCancellationRequested == true) return;
                await DbManager.DeleteRecord(MyNotesDatabase.MemoStore, memo.Id);
            }
            memos = new List<Memo>();
            statusMessage = "全てのメモを削除しました";
        }
        catch (Exception ex) when (!ex.GetType().Name.Contains("TaskCanceled"))
        {
            statusMessage = $"エラー: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            if (cancellationTokenSource?.Token.IsCancellationRequested == false)
            {
                StateHasChanged();
            }
        }
    }
}

<!-- Modal -->
<div class="modal fade" id="testModal" tabindex="-1" aria-labelledby="testModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="testModalLabel">Test Modal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Bootstrap modal is working correctly!
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>
